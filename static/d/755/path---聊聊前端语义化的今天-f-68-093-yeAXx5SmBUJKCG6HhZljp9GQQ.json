{"data":{"site":{"siteMetadata":{"title":"月半小夜曲","author":"chenyueban"}},"markdownRemark":{"id":"6a786b77-4e5d-5d77-9214-4489e9034cd8","excerpt":"语义化是前端开发里面的一个专用术语，其优点在于标签语义化有助于构架良好的html结构，有利于搜索引擎的建立索引、抓取；另外，亦有利于页面在不同的设备上显示尽可能相同；此外，亦有利于构建清晰的机构，有利于团队的开发、维护。 前端语义化一度和 HTML 相关联，前端开发者们通过使用一些视觉表现类似，语义不同的 HTML…","html":"<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E8%AF%AD%E4%B9%89%E5%8C%96\">语义化是前端开发里面的一个专用术语，其优点在于标签语义化有助于构架良好的html结构，有利于搜索引擎的建立索引、抓取；另外，亦有利于页面在不同的设备上显示尽可能相同；此外，亦有利于构建清晰的机构，有利于团队的开发、维护。</a></p>\n</blockquote>\n<p>前端语义化一度和 HTML 相关联，前端开发者们通过使用一些视觉表现类似，语义不同的 HTML 标签来提高 项目/产品 质量。在这里我聊得可能范围更加宽泛，包括但不仅仅是 HTML 的语义化。</p>\n<h2>语义化的前世</h2>\n<p>1998年 <a href=\"https://zh.wikipedia.org/wiki/%E8%92%82%E5%A7%86%C2%B7%E4%BC%AF%E7%BA%B3%E6%96%AF-%E6%9D%8E\">Tim Berners-Lee</a> 提出了<a href=\"https://zh.wikipedia.org/wiki/%E8%AF%AD%E4%B9%89%E7%BD%91\">语义网</a>的概念，它的核心是：</p>\n<blockquote>\n<p>通过给万维网上的文档（如: HTML文档）添加能够被计算机所理解的语义（元数据），从而使整个互联网成为一个通用的信息交换介质。</p>\n</blockquote>\n<p>在这里我想通过多个角度去理解语义化。</p>\n<h2>HTML</h2>\n<p>我所能查询到的大部分语义化都与 HTML 有关，所以先聊聊 HTML。</p>\n<p>HTML 早期版本就考虑到语义化，推出了 <code class=\"language-text\">h1</code>~<code class=\"language-text\">h6</code> <code class=\"language-text\">img</code> <code class=\"language-text\">ul</code> <code class=\"language-text\">ol</code> <code class=\"language-text\">li</code> 等 HTML 标签，早期搜索引擎也很好的利用这些语义化标签合理的抓取内容。</p>\n<p>而随着互联网内容的不断丰富，这些标签明显不足以描述各种功能，于是前端开始用 <code class=\"language-text\">id</code> <code class=\"language-text\">class</code> 等属性进一步丰富 Web。此时搜索引擎如果仅靠标签抓取内容就显得有些力不从心了。</p>\n<p>HTML5 发布后，诸如 <code class=\"language-text\">section</code> <code class=\"language-text\">header</code> <code class=\"language-text\">footer</code> <code class=\"language-text\">main</code> 等标签能更好的被搜索引擎抓取，并且降低了开发人员之间的交流成本，从而降低了维护成本。</p>\n<p>这里有一份 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5/HTML5_element_list#%E6%A0%B9%E5%85%83%E7%B4%A0\">HTML5 标签列表</a>，推荐一波。</p>\n<h3>举例</h3>\n<p>我曾经疑问 <code class=\"language-text\">&lt;b&gt;</code> <code class=\"language-text\">&lt;strong&gt;</code>、<code class=\"language-text\">&lt;i&gt;</code>  <code class=\"language-text\">&lt;em&gt;</code>的区别，从表现形式上看 <code class=\"language-text\">&lt;b&gt;</code> <code class=\"language-text\">&lt;strong&gt;</code> 都是文本的加粗、<code class=\"language-text\">&lt;i&gt;</code>  <code class=\"language-text\">&lt;em&gt;</code> 都是文本的斜体，似乎没什么区别。</p>\n<p>实际上 <code class=\"language-text\">em</code> 元素代表对其内容的强调：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">我今天&lt;em&gt;吃药&lt;/em&gt;的时候看到一个新闻\n我今天吃药的时候看到一个&lt;em&gt;新闻&lt;/em&gt;</code></pre></div>\n<p>这样爬虫就知道该关注你吃药还是关注新闻了（认真脸）。</p>\n<p><code class=\"language-text\">strong</code> 元素代表内容的强烈的重要性、严重性或者紧急性：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">我正在睡觉，同桌突然戳我一下说&lt;strong&gt;老师来了&lt;strong/&gt;</code></pre></div>\n<h3>总结：</h3>\n<ol>\n<li>利于SEO，不再解释。</li>\n<li>利于开发与维护，遵循同一个标准开发，同时让页面结构更加的清晰，自然提高了工作效率。</li>\n<li>利于更多设备解析。</li>\n</ol>\n<h2>HTTP 请求语义化</h2>\n<p>我们最常用的 <strong>HTTP 请求方法</strong> 就是 <code class=\"language-text\">GET</code> <code class=\"language-text\">POST</code> 了，先从历史的角度聊聊。</p>\n<h3>HTTP/0.9</h3>\n<p>作为 HTTP 最早大规模使用的版本，只有一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\"><code class=\"language-text\">GET</code></a> 方法，<strong>目的是从服务器获取 HTML 文档</strong>。</p>\n<h3>HTTP/1.0</h3>\n<p>这个版本新增了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD\"><code class=\"language-text\">HEAD</code></a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST\"><code class=\"language-text\">POST</code></a> 两种方法。</p>\n<ul>\n<li>\n<p>HEAD - <code class=\"language-text\">HEAD</code> 与 <code class=\"language-text\">GET</code> 类似，但 <strong><code class=\"language-text\">HEAD</code> 不含有呈现数据，仅含有 HTTP 头信息</strong>。通常用于判断资源是否存在。(若有其他用途欢迎留言或联系我提供呦)</p>\n</li>\n<li>\n<p>POST - <code class=\"language-text\">POST</code> 用于发送数据给服务端。<strong>HTTP/1.1</strong> 中描述 <code class=\"language-text\">POST</code> 涵盖一下功能：</p>\n<ul>\n<li>注释已有的资源</li>\n<li>在公告板，新闻组，邮件列表或类似的文章组中发布消息;</li>\n<li>通过注册新增用户;</li>\n<li>向数据处理程序提供一批数据，例如提交一个表单;</li>\n<li>通过追加操作，扩展数据库数据.</li>\n</ul>\n</li>\n</ul>\n<h3>HTTP/1.1</h3>\n<p>这个版本新增了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT\"><code class=\"language-text\">PUT</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/DELETE\"><code class=\"language-text\">DELETE</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/CONNECT\"><code class=\"language-text\">CONNECT</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS\"><code class=\"language-text\">OPTIONS</code></a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/TRACE\"><code class=\"language-text\">TRACE</code></a> 五种方法。</p>\n<ul>\n<li>\n<p><strong>PUT</strong> - <code class=\"language-text\">PUT</code> 方法用请求有效载荷替换目标资源的所有当前表示。</p>\n<ul>\n<li>与 <code class=\"language-text\">POST</code> 类似，都是往服务端发送数据，区别：</li>\n<li>client对一个URI发送一个Entity，服务器在这个URI下如果已经又了一个Entity，那么此刻服务器应该替换成client重新提交的，也由此保证了PUT的幂等性。如果服务器之前没有Entity ，那么服务器就应该将client提交的放在这个URI上。</li>\n<li>通过上面可以知道，如果用PUT来达到更改资源，需要client提交资源全部信息，如果只有部分信息，不应该使用PUT（因为服务器使用client提交的对象整体替换服务器的资源）。</li>\n</ul>\n</li>\n<li><strong>DELETE</strong> - <code class=\"language-text\">DELETE</code> 用于请求服务器删除所请求 <code class=\"language-text\">URI</code> 所标识的资源。</li>\n<li><strong>CONNECT</strong> - <code class=\"language-text\">CONNECT</code> 方法可以开启一个客户端与所请求资源之间的双向沟通的通道。它可以用来创建隧道（tunnel）。</li>\n<li><strong>OPTIONS</strong> - <code class=\"language-text\">OPTIONS</code> 方法用于获取目的资源所支持的通信选项。</li>\n<li>\n<p><strong>TRACE</strong> - <code class=\"language-text\">TRACE</code> 方法实现沿通向目标资源的路径的消息环回（loop-back）测试 ，提供了一种实用的 debug 机制。</p>\n<ul>\n<li>请求的最终接收者应当原样反射（reflect）它接收到的消息，除了以下字段部分，作为一个 <code class=\"language-text\">Content-Type</code> 为 <code class=\"language-text\">message/http</code> 的200（OK）响应的消息的主体（body）返回给客户端 。</li>\n</ul>\n</li>\n</ul>\n<h3>HTTP/1.1 的扩展</h3>\n<ul>\n<li><strong>PATCH</strong> - <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PATCH\"><code class=\"language-text\">PATCH</code></a> 用于对资源进行部分修改。前文提到使用 <code class=\"language-text\">PUT</code> 需要客户端提供资源全部信息整体替换，而对于只修改部分资源的场景，<code class=\"language-text\">PATCH</code> 尤为适合。</li>\n</ul>\n<h3>举例</h3>\n<p>过去为了解决跨域问题客户端曾使用 <a href=\"https://zh.wikipedia.org/wiki/JSONP\"><code class=\"language-text\">jsonp</code></a>与服务端交互，而 <code class=\"language-text\">jsonp</code> 需要一个带有 <code class=\"language-text\">src</code>  属性的 <code class=\"language-text\">script</code> 标签发送一条 <code class=\"language-text\">GET</code> 请求绕过跨域限制，这条请求可以作为增删改查等任何行为的触发器，所以很明显，<code class=\"language-text\">jsonp</code> 不符合语义化的规范。</p>\n<h3>总结</h3>\n<p>这一片段相关的内容很容易让人与 <strong>RESTful 规范</strong> 相联系，我所理解的是 <strong>RESTful 规范</strong> 本身就是语义化各种方案的实现，所以一定程度上 <strong>RESTful 规范</strong> 的优点也是 <strong>HTTP 请求语义化</strong>的优点。</p>\n<ol>\n<li><code class=\"language-text\">GET</code> <code class=\"language-text\">HEAD</code> <code class=\"language-text\">PUT</code> <code class=\"language-text\">DELETE</code> <code class=\"language-text\">OPTIONS</code> 是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/%E5%B9%82%E7%AD%89\">幂等</a> 的，<code class=\"language-text\">POST</code> <code class=\"language-text\">PATCH</code> 是非幂等的。</li>\n<li>服务自解释 - 例如评论的增删改查，只需要一个 URI <code class=\"language-text\">/common</code>，其他的该怎么做一目了然。</li>\n<li><a href=\"http://hippoom.github.io/blogs/value-of-hypermedia-from-client-perspective.html\">API内部实现解耦</a></li>\n</ol>\n<h2>JavaScript 语义化</h2>\n<h3>不要写无用的注释</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 数据类型判断</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> “<span class=\"token punctuation\">[</span>object String<span class=\"token punctuation\">]</span>”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// doSomething();</span>\n<span class=\"token punctuation\">}</span>；</code></pre></div>\n<p>与其为这种略复杂的逻辑写注释，不如封装为语义化函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isObject</span> <span class=\"token operator\">=</span> val <span class=\"token operator\">=></span> val <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span>\n  <span class=\"token operator\">&amp;&amp;</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span>\n  <span class=\"token operator\">&amp;&amp;</span> Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'[object Object]'</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// doSomething();</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>命名</h3>\n<p>这里只是抛转引玉，并不是规范。</p>\n<h4>1. 注意词性</h4>\n<ul>\n<li>\n<p>普通变量/属性用「名词」</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Frank'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  grade<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>bool变量/属性用「形容词」或者「be动词」或者「情态动词」或者「hasX」</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    dead<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 如果是形容词，前面就没必要加 is，比如isDead 就很废话</span>\n    canSpeak<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//情态动词有 can、should、will、need 等，情态动词后面接动词</span>\n    isVip<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// be 动词有 is、was 等，后面一般接名词</span>\n    hasChildren<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// has 加名词</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>普通函数/方法用「动词」开头</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 不及物动词</span>\n    <span class=\"token function\">drinkWater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 及物动词</span>\n    <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 及物动词加参数（参数是名词）</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>回调、钩子函数用「介词」开头，或用「动词的现在完成时态」</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">beforeDie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">afterDie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 或者</span>\n    <span class=\"token function\">willDie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">dead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 这里跟 bool 冲突，你只要不同时暴露 bool dead 和函数 dead 就行，怕冲突就用上面的 afterDie</span>\n<span class=\"token punctuation\">}</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> onButtonClick<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> component <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">beforeCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">beforeMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">beforeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">updated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">activated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">deactivated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">beforeDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">destroyed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">errorCaptured</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>容易混淆的地方加前缀</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">div1<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// DOM 对象</span>\ndiv2<span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// jQuery 对象</span>\n不如改成\ndomDiv1 或 elDiv1<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span>\n$div2<span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>属性访问器函数可以用名词</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$div<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 其实是 $div.getText()</span>\n$div<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 其实是 $div.setText('hi')</span></code></pre></div>\n<h4>2. 注意一致性</h4>\n<ul>\n<li>介词一致性\n如果你使用了 before + after，那么就在代码的所有地方都坚持使用\n如果你使用了 before + 完成时，那么就坚持使用\n如果你改来改去，就「不一致」了，不一致将导致「不可预测」</li>\n<li>顺序一致性\n比如 updateContainerWidth 和 updateHeightOfContainer 的顺序就令人很别扭，同样会引发「不可预测」</li>\n<li>\n<p>表里一致性\n函数名必须完美体现函数的功能，既不能多也不能少。\n比如</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getSongs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> $<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>'<span class=\"token operator\">/</span>songs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        div<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>songs\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>就违背了表里一致性，getSongs 表示获取歌曲，并没有暗示这个函数会更新页面，但是实际上函数更新了 div，这就是表里不一，正确的写法是</p>\n<ul>\n<li>\n<p>要么纠正函数名</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getSongsAndUpdateDiv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> $<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>'<span class=\"token operator\">/</span>songs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    div<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>songs\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>要么写成两个函数</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getSongs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> $<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>'<span class=\"token operator\">/</span>songs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateDiv</span><span class=\"token punctuation\">(</span>songs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\ndiv<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>songs\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">getSongs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n<span class=\"token function\">updateDiv</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>songs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>时间一致性:\n有可能随着代码的变迁，一个变量的含义已经不同于它一开始的含义了，这个时候你需要及时改掉这个变量的名字。\n这一条是最难做到的，因为写代码容易，改代码难。如果这个代码组织得不好，很可能会出现牵一发而动全身的情况（如全局变量就很难改）</li>\n</ul>\n<h2>最后</h2>\n<p>对于机器而言，语义化能更容易的分析数据。对于程序猿而言语义化能让我们少干点活，多点时间享受生活。</p>\n<blockquote>\n<p>前端现在是黎明前的黑暗，在几年内一定会明晰起来</p>\n</blockquote>\n<p>参考：</p>\n<ul>\n<li><a href=\"http://chenhaizhou.github.io/2015/12/09/html-sense.html\">谈谈对HTML语义化的理解</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000004553994\">Web语义化标准解读</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/23366045\">从 HTTP 0.9 到 QUIC</a></li>\n<li><a href=\"https://www.cnblogs.com/susanhonly/p/8508596.html\">HTTP协议的方法及应用场景</a></li>\n<li><a href=\"https://www.zhihu.com/question/48482736\">HTTP中post和put的根本区别和优势？</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002519080\">如何让你的JavaScript代码更加语义化</a></li>\n</ul>","frontmatter":{"title":"聊聊前端语义化的今天","date":"February 27, 2019","description":"前端语义化一度和 HTML 相关联，前端开发者们通过使用一些视觉表现类似，语义不同的 HTML 标签来提高 项目/产品 质量。在这里我聊得可能范围更加宽泛，包括但不仅仅是 HTML 的语义化。"}}},"pageContext":{"slug":"/聊聊前端语义化的今天/","previous":{"fields":{"slug":"/聊聊前端模块化/"},"frontmatter":{"title":"聊聊前端模块化"}},"next":{"fields":{"slug":"/React Suspense 尝鲜/"},"frontmatter":{"title":"React Suspense 尝鲜"}}}}