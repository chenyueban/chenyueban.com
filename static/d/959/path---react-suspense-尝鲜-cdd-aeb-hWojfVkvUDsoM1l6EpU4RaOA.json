{"data":{"site":{"siteMetadata":{"title":"月半小夜曲","author":"chenyueban"}},"markdownRemark":{"id":"d7270a6f-6451-5056-89c4-9c52456371f4","excerpt":"前言 如同字面意思，Suspense 让组件遇到异步操作时进入“悬停”状态，等异步操作有结果时再回归正常状态。 异步操作简单归为两类： 异步加载代码 异步加载数据 异步加载代码 异步加载代码就是所谓的  ，实现起来就像是这样： 值得一提的是目前版本 (截止至 react@16.…","html":"<h2>前言</h2>\n<p>如同字面意思，Suspense 让组件遇到异步操作时进入“悬停”状态，等异步操作有结果时再回归正常状态。</p>\n<p>异步操作简单归为两类：</p>\n<ol>\n<li>异步加载代码</li>\n<li>异步加载数据</li>\n</ol>\n<h2>异步加载代码</h2>\n<p>异步加载代码就是所谓的 <code class=\"language-text\">code splitting</code>，实现起来就像是这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>lazy<span class=\"token punctuation\">,</span> Suspense<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Suspense</span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OtherComponent</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Suspense</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>值得一提的是目前版本 (截止至 react@16.8) 还不支持服务端渲染，但还是会在以后的版本上支持的。</p>\n<h2>异步加载数据</h2>\n<p>Suspense 异步加载数据截止到目前都是不稳定的版本，根据 <a href=\"https://reactjs.org/blog/2018/11/27/react-16-roadmap.html\">React 16.x Roadmap</a>，大概到2019年中期发布稳定版本，但是 React 官方提供了一个独立的包 <a href=\"https://github.com/facebook/react/tree/master/packages/react-cache\">react-cache</a>，使用它结合 <code class=\"language-text\">react@16.6.0</code> 可以让我们提前感受一下 Suspense 异步加载数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> unstable_createResource <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-cache'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getSomething</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> resource <span class=\"token operator\">=</span> <span class=\"token function\">unstable_createResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getSomething</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> resource<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>细谈 Suspense</h2>\n<p>在上面的实例中，Suspense 组件传入了 <code class=\"language-text\">fallback</code> 属性，这个属性用于显示加载中的页面，就是俗称的 loading 咯。</p>\n<p>那么我们在想一个问题，如果一个异步请求数据的过程非常快，这样会使得加载中画面一闪而过，导致闪屏。</p>\n<p>Suspense 针对这种情况给出解决方案 <code class=\"language-text\">maxDuration</code> 属性：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Suspense</span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Spinner</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">maxDuration</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">500</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  // ...\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Suspense</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>当异步获取数据的时间大于 <code class=\"language-text\">maxDuration</code> 时间时展示 <code class=\"language-text\">fallback</code>，否则直接展示数据。</p>\n<p>需要注意的是 <code class=\"language-text\">maxDuration</code> 属性只有在 <code class=\"language-text\">Concurrent Mode</code> 下才能生效，在以往的 Sync 模式下 <code class=\"language-text\">maxDuration</code> 始终为0， 具体使用简单给出一个实例：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ReactDOM.render(&lt;App />, document.getElementById('root'));</span>\nReactDOM\n  <span class=\"token punctuation\">.</span><span class=\"token function\">unstable_createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>React.unstable_ConcurrentMode</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>React.unstable_ConcurrentMode</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>原理</h2>\n<p>Suspense 的实现原理颇有争议。</p>\n<p>当我们在 render 内写异步请求数据时会抛出一个异常，当然它应该是一个 <code class=\"language-text\">promise</code>，这个异常会被 Suspense 内一个新的生命周期 <code class=\"language-text\">ComponentDidCatch</code> 捕获到，在这个生命周期内 Suspense 将子组件渲染为 loading ，等到异步请求结束，loading结束，此时又回到了正常的组件。</p>\n<p>翻了一下 <code class=\"language-text\">unstable_createResource</code> 的源码，果然 <code class=\"language-text\">Pending</code> 状态下会 <code class=\"language-text\">throw</code> 一个 <code class=\"language-text\">suspender</code> 对象，这个对象就是一个 <code class=\"language-text\">promise</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">unstable_createResource</span><span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">,</span> maybeHashInput<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">var</span> resource <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    read<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n      <span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> <span class=\"token function\">hashInput</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">accessResult</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">,</span> fetch<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> Pending<span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> suspender <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> suspender<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> Resolved<span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> _value <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> _value<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> Rejected<span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> error <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\">// Should be unreachable</span>\n          <span class=\"token keyword\">return</span> undefined<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> resource<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>总结</h2>\n<p>不知道你能不能接受如此 hack 的实现方式，固然缺点是有的，但是它带来的便利性真的让我异常期待。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://reactjs.org/blog/2018/11/27/react-16-roadmap.html#react-16x-q2-2019-the-one-with-concurrent-mode\">The One with Concurrent Mode</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/57938605\">React Supense和异步渲染的一点矛盾</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/34210780\">React：Suspense的实现与探讨</a></li>\n<li><a href=\"https://juejin.im/post/5c7d4a785188251b921f4e26\">深度理解 React Suspense\n</a></li>\n</ul>","frontmatter":{"title":"React Suspense 尝鲜","date":"March 06, 2019","description":"Suspense 让组件遇到异步操作时进入“悬停”状态，等异步操作有结果时再回归正常状态。"}}},"pageContext":{"slug":"/React Suspense 尝鲜/","previous":{"fields":{"slug":"/聊聊前端语义化的今天/"},"frontmatter":{"title":"聊聊前端语义化的今天"}},"next":null}}